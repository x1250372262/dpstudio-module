/*
 * Copyright 2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dpstudio.module.wxminiprogram.model;

import net.ymate.platform.core.beans.annotation.PropertyState;
import net.ymate.platform.core.persistence.annotation.Comment;
import net.ymate.platform.core.persistence.annotation.Default;
import net.ymate.platform.core.persistence.annotation.Entity;
import net.ymate.platform.core.persistence.annotation.Id;
import net.ymate.platform.core.persistence.annotation.Property;
import net.ymate.platform.core.persistence.annotation.Readonly;
import net.ymate.platform.persistence.jdbc.JDBC;
import net.ymate.platform.persistence.jdbc.query.AbstractFieldConditionBuilder;
import net.ymate.platform.persistence.jdbc.query.FieldCondition;
import net.ymate.platform.persistence.jdbc.query.Query;
import net.ymate.platform.persistence.jdbc.support.BaseEntity;
import net.ymate.platform.core.persistence.IShardingable;
import net.ymate.platform.persistence.jdbc.IDatabase;
import net.ymate.platform.persistence.jdbc.IDatabaseConnectionHolder;
import org.apache.commons.lang3.StringUtils;

/**
 * MimiprogramUser generated By EntityMojo on 2021/03/31 09:23:13
 *
 * @author YMP (https://www.ymate.net/)
 */
@Entity(MimiprogramUser.TABLE_NAME)
public class MimiprogramUser extends BaseEntity<MimiprogramUser, String> {

    private static final long serialVersionUID = 1L;

    @Id
    @Property(name = FIELDS.ID, nullable = false, length = 32)
    @Comment("")
    @PropertyState(propertyName = FIELDS.ID)
    private String id;

    
    @Property(name = FIELDS.OPEN_ID, nullable = false, length = 256)
    @Comment("")
    @PropertyState(propertyName = FIELDS.OPEN_ID)
    private String openId;

    
    @Property(name = FIELDS.UNION_ID, length = 32)
    @Comment("")
    @PropertyState(propertyName = FIELDS.UNION_ID)
    private String unionId;

    
    @Property(name = FIELDS.NICK_NAME, length = 32)
    @Comment("昵称")
    @PropertyState(propertyName = FIELDS.NICK_NAME)
    private String nickName;

    
    @Property(name = FIELDS.MOBILE, length = 11)
    @Comment("手机号")
    @PropertyState(propertyName = FIELDS.MOBILE)
    private String mobile;

    
    @Property(name = FIELDS.GENDER, unsigned = true, length = 1)
    @Default("0")
    @Comment("性别")
    @PropertyState(propertyName = FIELDS.GENDER)
    private Integer gender;

    
    @Property(name = FIELDS.AVATAR_URL, length = 255)
    @Comment("头像")
    @PropertyState(propertyName = FIELDS.AVATAR_URL)
    private String avatarUrl;

    
    @Property(name = FIELDS.COUNTRY, length = 32)
    @Comment("国家")
    @PropertyState(propertyName = FIELDS.COUNTRY)
    private String country;

    
    @Property(name = FIELDS.PROVINCE, length = 32)
    @Comment("省份")
    @PropertyState(propertyName = FIELDS.PROVINCE)
    private String province;

    
    @Property(name = FIELDS.CITY, length = 32)
    @Comment("城市")
    @PropertyState(propertyName = FIELDS.CITY)
    private String city;

    
    @Property(name = FIELDS.CREATE_TIME, nullable = false, length = 13)
    @Default("0")
    @Comment("")
    @PropertyState(propertyName = FIELDS.CREATE_TIME)
    private Long createTime;

    
    @Property(name = FIELDS.LAST_MODIFY_TIME, nullable = false, length = 13)
    @Default("0")
    @Comment("最后修改时间")
    @PropertyState(propertyName = FIELDS.LAST_MODIFY_TIME)
    private Long lastModifyTime;


    public MimiprogramUser() {
    }

    public MimiprogramUser(IDatabase dbOwner) {
        super(dbOwner);
    }

    public MimiprogramUser(String id, String openId, Long createTime, Long lastModifyTime) {
        this.id = id;
        this.openId = openId;
        this.createTime = createTime;
        this.lastModifyTime = lastModifyTime;
    }

        public MimiprogramUser(IDatabase dbOwner, String id, String openId, Long createTime, Long lastModifyTime) {
            super(dbOwner);
            this.id = id;
            this.openId = openId;
            this.createTime = createTime;
            this.lastModifyTime = lastModifyTime;
        }

    public MimiprogramUser(String id, String openId, String unionId, String nickName, String mobile, Integer gender, String avatarUrl, String country, String province, String city, Long createTime, Long lastModifyTime) {
        this.id = id;
        this.openId = openId;
        this.unionId = unionId;
        this.nickName = nickName;
        this.mobile = mobile;
        this.gender = gender;
        this.avatarUrl = avatarUrl;
        this.country = country;
        this.province = province;
        this.city = city;
        this.createTime = createTime;
        this.lastModifyTime = lastModifyTime;
    }

    public MimiprogramUser(IDatabase dbOwner, String id, String openId, String unionId, String nickName, String mobile, Integer gender, String avatarUrl, String country, String province, String city, Long createTime, Long lastModifyTime) {
        super(dbOwner);
        this.id = id;
        this.openId = openId;
        this.unionId = unionId;
        this.nickName = nickName;
        this.mobile = mobile;
        this.gender = gender;
        this.avatarUrl = avatarUrl;
        this.country = country;
        this.province = province;
        this.city = city;
        this.createTime = createTime;
        this.lastModifyTime = lastModifyTime;
    }

    @Override
    public String getId() {
        return id;
    }

    @Override
    public void setId(String id) {
        this.id = id;
    }

    public String getOpenId() {
        return openId;
    }

    public void setOpenId(String openId) {
        this.openId = openId;
    }

    public String getUnionId() {
        return unionId;
    }

    public void setUnionId(String unionId) {
        this.unionId = unionId;
    }

    public String getNickName() {
        return nickName;
    }

    public void setNickName(String nickName) {
        this.nickName = nickName;
    }

    public String getMobile() {
        return mobile;
    }

    public void setMobile(String mobile) {
        this.mobile = mobile;
    }

    public Integer getGender() {
        return gender;
    }

    public void setGender(Integer gender) {
        this.gender = gender;
    }

    public String getAvatarUrl() {
        return avatarUrl;
    }

    public void setAvatarUrl(String avatarUrl) {
        this.avatarUrl = avatarUrl;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getProvince() {
        return province;
    }

    public void setProvince(String province) {
        this.province = province;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Long createTime) {
        this.createTime = createTime;
    }

    public Long getLastModifyTime() {
        return lastModifyTime;
    }

    public void setLastModifyTime(Long lastModifyTime) {
        this.lastModifyTime = lastModifyTime;
    }


    public Builder bind() {
        return new Builder(this);
    }

    public static Builder builder() {
        return new Builder();
    }

        public static Builder builder(IDatabase dbOwner) {
            return new Builder(dbOwner);
        }

    public static class Builder {

        private final MimiprogramUser targetEntity;

        public Builder() {
            targetEntity = new MimiprogramUser();
        }

        public Builder(IDatabase dbOwner) {
            targetEntity = new MimiprogramUser(dbOwner);
        }

        public Builder(MimiprogramUser targetEntity) {
            this.targetEntity = targetEntity;
        }

        public MimiprogramUser build() {
            return targetEntity;
        }

        public IDatabaseConnectionHolder connectionHolder() {
            return targetEntity.getConnectionHolder();
        }

        public Builder connectionHolder(IDatabaseConnectionHolder connectionHolder) {
            targetEntity.setConnectionHolder(connectionHolder);
            return this;
        }

        public IDatabase dbOwner() {
            return targetEntity.getDbOwner();
        }

        public Builder dbOwner(IDatabase dbOwner) {
            targetEntity.setDbOwner(dbOwner);
            return this;
        }

        public String dataSourceName() {
            return targetEntity.getDataSourceName();
        }

        public Builder dataSourceName(String dataSourceName) {
            targetEntity.setDataSourceName(dataSourceName);
            return this;
        }

        public IShardingable shardingable() {
            return targetEntity.getShardingable();
        }

        public Builder shardingable(IShardingable shardingable) {
            targetEntity.setShardingable(shardingable);
            return this;
        }


        public String id() {
            return targetEntity.getId();
        }

        public Builder id(String id) {
            targetEntity.setId(id);
            return this;
        }

        public String openId() {
            return targetEntity.getOpenId();
        }

        public Builder openId(String openId) {
            targetEntity.setOpenId(openId);
            return this;
        }

        public String unionId() {
            return targetEntity.getUnionId();
        }

        public Builder unionId(String unionId) {
            targetEntity.setUnionId(unionId);
            return this;
        }

        public String nickName() {
            return targetEntity.getNickName();
        }

        public Builder nickName(String nickName) {
            targetEntity.setNickName(nickName);
            return this;
        }

        public String mobile() {
            return targetEntity.getMobile();
        }

        public Builder mobile(String mobile) {
            targetEntity.setMobile(mobile);
            return this;
        }

        public Integer gender() {
            return targetEntity.getGender();
        }

        public Builder gender(Integer gender) {
            targetEntity.setGender(gender);
            return this;
        }

        public String avatarUrl() {
            return targetEntity.getAvatarUrl();
        }

        public Builder avatarUrl(String avatarUrl) {
            targetEntity.setAvatarUrl(avatarUrl);
            return this;
        }

        public String country() {
            return targetEntity.getCountry();
        }

        public Builder country(String country) {
            targetEntity.setCountry(country);
            return this;
        }

        public String province() {
            return targetEntity.getProvince();
        }

        public Builder province(String province) {
            targetEntity.setProvince(province);
            return this;
        }

        public String city() {
            return targetEntity.getCity();
        }

        public Builder city(String city) {
            targetEntity.setCity(city);
            return this;
        }

        public Long createTime() {
            return targetEntity.getCreateTime();
        }

        public Builder createTime(Long createTime) {
            targetEntity.setCreateTime(createTime);
            return this;
        }

        public Long lastModifyTime() {
            return targetEntity.getLastModifyTime();
        }

        public Builder lastModifyTime(Long lastModifyTime) {
            targetEntity.setLastModifyTime(lastModifyTime);
            return this;
        }
    }

    public interface FIELDS {
        String ID = "id";
        String OPEN_ID = "open_id";
        String UNION_ID = "union_id";
        String NICK_NAME = "nick_name";
        String MOBILE = "mobile";
        String GENDER = "gender";
        String AVATAR_URL = "avatar_url";
        String COUNTRY = "country";
        String PROVINCE = "province";
        String CITY = "city";
        String CREATE_TIME = "create_time";
        String LAST_MODIFY_TIME = "last_modify_time";
    }

    public static final String TABLE_NAME = "mimiprogram_user";

    public static FieldConditionBuilder conditionBuilder() {
        return new FieldConditionBuilder();
    }

    public static FieldConditionBuilder conditionBuilder(String prefix) {
        return new FieldConditionBuilder(prefix);
    }

    public static FieldConditionBuilder conditionBuilder(Query<?> query) {
        return conditionBuilder(query, null);
    }

    public static FieldConditionBuilder conditionBuilder(Query<?> query, String prefix) {
        return new FieldConditionBuilder(query.owner(), query.dataSourceName(), prefix);
    }

    public static FieldConditionBuilder conditionBuilder(MimiprogramUser entity) {
        return conditionBuilder(entity, null);
    }

    public static FieldConditionBuilder conditionBuilder(MimiprogramUser entity, String prefix) {
        return new FieldConditionBuilder(entity.doGetSafeOwner(), entity.getDataSourceName(), prefix);
    }

    public static FieldConditionBuilder conditionBuilder(IDatabase owner, String prefix) {
        return new FieldConditionBuilder(owner, prefix);
    }

    public static FieldConditionBuilder conditionBuilder(IDatabase owner, String dataSourceName, String prefix) {
        return new FieldConditionBuilder(owner, dataSourceName, prefix);
    }

    public static class FieldConditionBuilder extends AbstractFieldConditionBuilder {

        public FieldConditionBuilder() {
            super(null, null, null);
        }

        public FieldConditionBuilder(String prefix) {
            super(null, null, prefix);
        }

        public FieldConditionBuilder(Query<?> query) {
            super(query.owner(), null, null);
        }

        public FieldConditionBuilder(Query<?> query, String prefix) {
            super(query.owner(), query.dataSourceName(), prefix);
        }

        public FieldConditionBuilder(IDatabase owner) {
            super(owner, null, null);
        }

        public FieldConditionBuilder(IDatabase owner, String prefix) {
            super(owner, null, prefix);
        }

        public FieldConditionBuilder(IDatabase owner, String dataSourceName, String prefix) {
            super(owner, dataSourceName, prefix);
        }

        public FieldCondition id() {
            return createFieldCondition(FIELDS.ID);
        }

        public FieldCondition openId() {
            return createFieldCondition(FIELDS.OPEN_ID);
        }

        public FieldCondition unionId() {
            return createFieldCondition(FIELDS.UNION_ID);
        }

        public FieldCondition nickName() {
            return createFieldCondition(FIELDS.NICK_NAME);
        }

        public FieldCondition mobile() {
            return createFieldCondition(FIELDS.MOBILE);
        }

        public FieldCondition gender() {
            return createFieldCondition(FIELDS.GENDER);
        }

        public FieldCondition avatarUrl() {
            return createFieldCondition(FIELDS.AVATAR_URL);
        }

        public FieldCondition country() {
            return createFieldCondition(FIELDS.COUNTRY);
        }

        public FieldCondition province() {
            return createFieldCondition(FIELDS.PROVINCE);
        }

        public FieldCondition city() {
            return createFieldCondition(FIELDS.CITY);
        }

        public FieldCondition createTime() {
            return createFieldCondition(FIELDS.CREATE_TIME);
        }

        public FieldCondition lastModifyTime() {
            return createFieldCondition(FIELDS.LAST_MODIFY_TIME);
        }
    }
}
