/*
 * Copyright 2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dpstudio.module.wxminiprogram.impl;

import com.dpstudio.module.wxminiprogram.IWxMimiProgramHandler;
import com.dpstudio.module.wxminiprogram.IWxMiniProgram;
import com.dpstudio.module.wxminiprogram.IWxMiniProgramConfig;
import net.ymate.platform.core.module.IModuleConfigurer;
import net.ymate.platform.core.module.impl.DefaultModuleConfigurable;

/**
 * DefaultSecurityConfig generated By ModuleMojo on 2020/06/30 17:49
 *
 * @author YMP (https://www.ymate.net/)
 */
public final class DefaultWxMiniProgramConfigurable extends DefaultModuleConfigurable {

    public static Builder builder() {
        return new Builder();
    }

    private DefaultWxMiniProgramConfigurable() {
        super(IWxMiniProgram.MODULE_NAME);
    }

    public static final class Builder {

        private final DefaultWxMiniProgramConfigurable configurable = new DefaultWxMiniProgramConfigurable();

        private Builder() {
        }

        public Builder enabled(boolean enabled) {
            configurable.addConfig(IWxMiniProgramConfig.ENABLED, String.valueOf(enabled));
            return this;
        }

        public Builder appId(String appId) {
            configurable.addConfig(IWxMiniProgramConfig.APP_ID, appId);
            return this;
        }

        public Builder appSecret(String appSecret) {
            configurable.addConfig(IWxMiniProgramConfig.APP_SECRET, appSecret);
            return this;
        }

        public Builder dataHandlerClass(Class<? extends IWxMimiProgramHandler> dataHandlerClass) {
            configurable.addConfig(IWxMiniProgramConfig.DATA_HANDLER_CLASS, dataHandlerClass.getName());
            return this;
        }

        public Builder dataHandlerDefaultByDatabases(boolean dataHandlerDefaultByDatabases) {
            configurable.addConfig(IWxMiniProgramConfig.DATA_HANDLER_DEFAULT_BY_DATABASES, String.valueOf(dataHandlerDefaultByDatabases));
            return this;
        }

        public IModuleConfigurer build() {
            return configurable.toModuleConfigurer();
        }
    }
}