/*
 * Copyright 2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.mx.module.wxminiprogram.impl;

import com.mx.module.wxminiprogram.IWxMimiProgramHandler;
import com.mx.module.wxminiprogram.IWxMiniProgram;
import com.mx.module.wxminiprogram.IWxMiniProgramConfig;
import com.mx.module.wxminiprogram.annotation.WxMiniProgramConf;
import net.ymate.platform.commons.util.ClassUtils;
import net.ymate.platform.core.configuration.IConfigReader;
import net.ymate.platform.core.module.IModuleConfigurer;
import org.apache.commons.lang.NullArgumentException;
import org.apache.commons.lang3.StringUtils;

/**
 * DefaultSecurityConfig generated By ModuleMojo on 2020/06/30 17:49
 *
 * @author YMP (https://www.ymate.net/)
 */
public final class DefaultWxMiniProgramConfig implements IWxMiniProgramConfig {

    private boolean enabled = true;
    private String appId;
    private String appSecret;
    private IWxMimiProgramHandler dataHandlerClass;
    private boolean dataHandlerDefaultByDatabases = false;


    private boolean initialized;

    public static DefaultWxMiniProgramConfig defaultConfig() {
        return builder().build();
    }

    public static DefaultWxMiniProgramConfig create(IModuleConfigurer moduleConfigurer) {
        return new DefaultWxMiniProgramConfig(null, moduleConfigurer);
    }

    public static DefaultWxMiniProgramConfig create(Class<?> mainClass, IModuleConfigurer moduleConfigurer) {
        return new DefaultWxMiniProgramConfig(mainClass, moduleConfigurer);
    }

    public static Builder builder() {
        return new Builder();
    }

    private DefaultWxMiniProgramConfig() {
    }

    private DefaultWxMiniProgramConfig(Class<?> mainClass, IModuleConfigurer moduleConfigurer) {
        IConfigReader configReader = moduleConfigurer.getConfigReader();
        WxMiniProgramConf confAnn = mainClass == null ? null : mainClass.getAnnotation(WxMiniProgramConf.class);
        enabled = configReader.getBoolean(ENABLED, confAnn == null || confAnn.enabled());
        appId = configReader.getString(APP_ID, confAnn != null ? confAnn.appId() : "");
        appSecret = configReader.getString(APP_SECRET, confAnn != null ? confAnn.appSecret() : "");
        String dataHandlerClassName = configReader.getString(DATA_HANDLER_CLASS, confAnn != null ? confAnn.wxMimiProgramHandler().getName() : null);
        dataHandlerClass = ClassUtils.impl(dataHandlerClassName, IWxMimiProgramHandler.class, this.getClass());
        if(dataHandlerClass == null){
            dataHandlerClass = new DefaultWxMimiProgramHandler();
        }
        dataHandlerDefaultByDatabases = configReader.getBoolean(DATA_HANDLER_DEFAULT_BY_DATABASES, confAnn == null || confAnn.dataHandlerDefaultByDatabases());
    }

    @Override
    public void initialize(IWxMiniProgram owner) {
        if (!initialized) {
            if (enabled) {
                if (StringUtils.isBlank(appId)) {
                    throw new NullArgumentException(APP_ID);
                }
                if (StringUtils.isBlank(appSecret)) {
                    throw new NullArgumentException(APP_SECRET);
                }
            }
            initialized = true;
        }
    }

    @Override
    public boolean isInitialized() {
        return initialized;
    }

    @Override
    public boolean isEnabled() {
        return enabled;
    }

    @Override
    public String appId() {
        return appId;
    }

    @Override
    public String appSecret() {
        return appSecret;
    }

    @Override
    public IWxMimiProgramHandler dataHandlerClass() {
        return dataHandlerClass;
    }

    @Override
    public boolean dataHandlerDefaultByDatabases() {
        return dataHandlerDefaultByDatabases;
    }


    public void setEnabled(boolean enabled) {
        if (!initialized) {
            this.enabled = enabled;
        }
    }

    public void setAppId(String appId) {
        if (!initialized) {
            this.appId = appId;
        }
    }

    public void setAppSecret(String appSecret) {
        if (!initialized) {
            this.appSecret = appSecret;
        }
    }

    public void setDataHandlerClass(IWxMimiProgramHandler dataHandlerClass) {
        if (!initialized) {
            this.dataHandlerClass = dataHandlerClass;
        }
    }


    public void setDataHandlerDefaultByDatabases(boolean dataHandlerDefaultByDatabases) {
        if (!initialized) {
            this.dataHandlerDefaultByDatabases = dataHandlerDefaultByDatabases;
        }
    }

    public static final class Builder {

        private final DefaultWxMiniProgramConfig config = new DefaultWxMiniProgramConfig();

        private Builder() {
        }

        public Builder enabled(boolean enabled) {
            config.setEnabled(enabled);
            return this;
        }

        public Builder appId(String appId) {
            config.setAppId(appId);
            return this;
        }

        public Builder appSecret(String appSecret) {
            config.setAppSecret(appSecret);
            return this;
        }

        public Builder dataHandlerClass(IWxMimiProgramHandler dataHandlerClass) {
            config.setDataHandlerClass(dataHandlerClass);
            return this;
        }

        public Builder dataHandlerDefaultByDatabases(boolean dataHandlerDefaultByDatabases) {
            config.setDataHandlerDefaultByDatabases(dataHandlerDefaultByDatabases);
            return this;
        }

        public DefaultWxMiniProgramConfig build() {
            return config;
        }
    }
}