package com.mx.module.wxminiprogram;

import com.mx.module.wxminiprogram.bean.WxCodeSession;
import com.mx.module.wxminiprogram.bean.WxPhoneInfo;
import com.mx.module.wxminiprogram.bean.WxUserInfo;
import com.mx.module.wxminiprogram.impl.DefaultWxMiniProgramConfig;
import com.mx.module.wxminiprogram.utils.PKCS7Encoder;
import net.ymate.platform.commons.http.HttpClientHelper;
import net.ymate.platform.commons.http.IHttpResponse;
import net.ymate.platform.core.*;
import net.ymate.platform.core.module.IModule;
import net.ymate.platform.core.module.IModuleConfigurer;
import net.ymate.platform.core.module.impl.DefaultModuleConfigurer;
import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.AlgorithmParameters;
import java.util.HashMap;
import java.util.Map;

/**
 * Security generated By ModuleMojo on 2020/06/30 17:49
 *
 * @author YMP (https://www.ymate.net/)
 */
public final class WxMiniProgram implements IModule, IWxMiniProgram {


    private static volatile IWxMiniProgram instance;

    private IApplication owner;

    private IWxMiniProgramConfig config;

    private boolean initialized;

    public static IWxMiniProgram get() {
        IWxMiniProgram inst = instance;
        if (inst == null) {
            synchronized (WxMiniProgram.class) {
                inst = instance;
                if (inst == null) {
                    instance = inst = YMP.get().getModuleManager().getModule(WxMiniProgram.class);
                }
            }
        }
        return inst;
    }

    public WxMiniProgram() {
    }

    public WxMiniProgram(IWxMiniProgramConfig config) {
        this.config = config;
    }

    @Override
    public String getName() {
        return MODULE_NAME;
    }

    @Override
    public void initialize(IApplication owner) throws Exception {
        if (!initialized) {
            //
            YMP.showVersion("Initializing mx-module-wxminiprogram-${version}", new Version(2, 0, 0, WxMiniProgram.class, Version.VersionType.Alpha));
            //
            this.owner = owner;
            if (config == null) {
                IApplicationConfigureFactory configureFactory = owner.getConfigureFactory();
                if (configureFactory != null) {
                    IApplicationConfigurer configurer = configureFactory.getConfigurer();
                    IModuleConfigurer moduleConfigurer = configurer == null ? null : configurer.getModuleConfigurer(MODULE_NAME);
                    if (moduleConfigurer != null) {
                        config = DefaultWxMiniProgramConfig.create(configureFactory.getMainClass(), moduleConfigurer);
                    } else {
                        config = DefaultWxMiniProgramConfig.create(configureFactory.getMainClass(), DefaultModuleConfigurer.createEmpty(MODULE_NAME));
                    }
                }
                if (config == null) {
                    config = DefaultWxMiniProgramConfig.defaultConfig();
                }
            }
            if (!config.isInitialized()) {
                config.initialize(this);
            }
            initialized = true;
        }
    }


    @Override
    public boolean isInitialized() {
        return initialized;
    }

    @Override
    public void close() throws Exception {
        if (initialized) {
            initialized = false;
            config = null;
            owner = null;
        }
    }

    @Override
    public IApplication getOwner() {
        return owner;
    }

    @Override
    public IWxMiniProgramConfig getConfig() {
        return config;
    }

    @Override
    public WxCodeSession getSessionInfo(String jsCode) throws Exception {
        Map<String, String> params = new HashMap<>(8);
        params.put("appid", config.appId());
        params.put("secret", config.appSecret());
        params.put("js_code", jsCode);
        params.put("grant_type", "authorization_code");
        IHttpResponse response = HttpClientHelper.create().get(WX_API.JSCODE_TO_SESSION_URL, params);
        return WxCodeSession.byJson(response.getContent());
    }

    @Override
    public WxUserInfo getUserInfo(String sessionKey, String encryptedData, String ivStr) throws Exception {
        return WxUserInfo.byJson(decrypt(sessionKey, encryptedData, ivStr));
    }

    @Override
    public boolean checkUserInfo(String sessionKey, String rawData, String signature) throws Exception {
        final String generatedSignature = DigestUtils.sha1Hex(rawData + sessionKey);
        return generatedSignature.equals(signature);
    }

    @Override
    public WxPhoneInfo getPhoneNoInfo(String sessionKey, String encryptedData, String ivStr) throws Exception {
        return WxPhoneInfo.byJson(decrypt(sessionKey, encryptedData, ivStr));
    }

    @Override
    public IWxMimiProgramHandler getHandler() throws Exception {
        return config.dataHandlerClass();
    }

    /**
     * AES解密
     *
     * @param encryptedData 消息密文
     * @param ivStr         iv字符串
     */
    private String decrypt(String sessionKey, String encryptedData, String ivStr) {
        try {
            AlgorithmParameters params = AlgorithmParameters.getInstance("AES");
            params.init(new IvParameterSpec(Base64.decodeBase64(ivStr)));

            Cipher cipher = Cipher.getInstance("AES/CBC/NoPadding");
            cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(Base64.decodeBase64(sessionKey), "AES"), params);

            return new String(PKCS7Encoder.decode(cipher.doFinal(Base64.decodeBase64(encryptedData))), StandardCharsets.UTF_8);
        } catch (Exception e) {
            throw new RuntimeException("AES解密失败", e);
        }
    }

}
