/*
 * Copyright 2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dpstudio.module.security.model;

import net.ymate.platform.core.beans.annotation.PropertyState;
import net.ymate.platform.core.persistence.IShardingable;
import net.ymate.platform.core.persistence.annotation.*;
import net.ymate.platform.persistence.jdbc.IDatabase;
import net.ymate.platform.persistence.jdbc.IDatabaseConnectionHolder;
import net.ymate.platform.persistence.jdbc.query.AbstractFieldConditionBuilder;
import net.ymate.platform.persistence.jdbc.query.FieldCondition;
import net.ymate.platform.persistence.jdbc.query.Query;
import net.ymate.platform.persistence.jdbc.support.BaseEntity;

/**
 * SecurityAdminLog generated By EntityMojo on 2021/03/15 10:00:12
 *
 * @author YMP (https://www.ymate.net/)
 */
@Entity(SecurityAdminLog.TABLE_NAME)
public class SecurityAdminLog extends BaseEntity<SecurityAdminLog, String> {

    private static final long serialVersionUID = 1L;

    @Id
    @Property(name = FIELDS.ID, nullable = false, length = 32)
    @Comment("")
    @PropertyState(propertyName = FIELDS.ID)
    private String id;

    
    @Property(name = FIELDS.CLIENT_NAME, nullable = false, length = 100)
    @Comment("")
    @PropertyState(propertyName = FIELDS.CLIENT_NAME)
    private String clientName;

    
    @Property(name = FIELDS.TYPE, nullable = false, length = 2)
    @Comment("类型")
    @PropertyState(propertyName = FIELDS.TYPE)
    private Integer type;

    
    @Property(name = FIELDS.ACTION, nullable = false, length = 100)
    @Comment("动作")
    @PropertyState(propertyName = FIELDS.ACTION)
    private String action;

    
    @Property(name = FIELDS.ADMIN_ID, length = 32)
    @Comment("管理员id")
    @PropertyState(propertyName = FIELDS.ADMIN_ID)
    private String adminId;

    
    @Property(name = FIELDS.CONTENT, nullable = false, length = 16383)
    @Comment("内容")
    @PropertyState(propertyName = FIELDS.CONTENT)
    private String content;

    
    @Property(name = FIELDS.CREATE_USER, nullable = false, length = 32)
    @Comment("创建人")
    @PropertyState(propertyName = FIELDS.CREATE_USER)
    private String createUser;

    
    @Property(name = FIELDS.CREATE_TIME, nullable = false, length = 13)
    @Default("0")
    @Comment("创建时间")
    @PropertyState(propertyName = FIELDS.CREATE_TIME)
    private Long createTime;

    
    @Property(name = FIELDS.LAST_MODIFY_USER, nullable = false, length = 32)
    @Comment("最后修改人")
    @PropertyState(propertyName = FIELDS.LAST_MODIFY_USER)
    private String lastModifyUser;

    
    @Property(name = FIELDS.LAST_MODIFY_TIME, nullable = false, length = 13)
    @Default("0")
    @Comment("最后修改时间")
    @PropertyState(propertyName = FIELDS.LAST_MODIFY_TIME)
    private Long lastModifyTime;


    public SecurityAdminLog() {
    }

    public SecurityAdminLog(IDatabase dbOwner) {
        super(dbOwner);
    }

    public SecurityAdminLog(String id, String clientName, Integer type, String action, String content, String createUser, Long createTime, String lastModifyUser, Long lastModifyTime) {
        this.id = id;
        this.clientName = clientName;
        this.type = type;
        this.action = action;
        this.content = content;
        this.createUser = createUser;
        this.createTime = createTime;
        this.lastModifyUser = lastModifyUser;
        this.lastModifyTime = lastModifyTime;
    }

        public SecurityAdminLog(IDatabase dbOwner, String id, String clientName, Integer type, String action, String content, String createUser, Long createTime, String lastModifyUser, Long lastModifyTime) {
            super(dbOwner);
            this.id = id;
            this.clientName = clientName;
            this.type = type;
            this.action = action;
            this.content = content;
            this.createUser = createUser;
            this.createTime = createTime;
            this.lastModifyUser = lastModifyUser;
            this.lastModifyTime = lastModifyTime;
        }

    public SecurityAdminLog(String id, String clientName, Integer type, String action, String adminId, String content, String createUser, Long createTime, String lastModifyUser, Long lastModifyTime) {
        this.id = id;
        this.clientName = clientName;
        this.type = type;
        this.action = action;
        this.adminId = adminId;
        this.content = content;
        this.createUser = createUser;
        this.createTime = createTime;
        this.lastModifyUser = lastModifyUser;
        this.lastModifyTime = lastModifyTime;
    }

    public SecurityAdminLog(IDatabase dbOwner, String id, String clientName, Integer type, String action, String adminId, String content, String createUser, Long createTime, String lastModifyUser, Long lastModifyTime) {
        super(dbOwner);
        this.id = id;
        this.clientName = clientName;
        this.type = type;
        this.action = action;
        this.adminId = adminId;
        this.content = content;
        this.createUser = createUser;
        this.createTime = createTime;
        this.lastModifyUser = lastModifyUser;
        this.lastModifyTime = lastModifyTime;
    }

    @Override
    public String getId() {
        return id;
    }

    @Override
    public void setId(String id) {
        this.id = id;
    }

    public String getClientName() {
        return clientName;
    }

    public void setClientName(String clientName) {
        this.clientName = clientName;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public String getAction() {
        return action;
    }

    public void setAction(String action) {
        this.action = action;
    }

    public String getAdminId() {
        return adminId;
    }

    public void setAdminId(String adminId) {
        this.adminId = adminId;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getCreateUser() {
        return createUser;
    }

    public void setCreateUser(String createUser) {
        this.createUser = createUser;
    }

    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Long createTime) {
        this.createTime = createTime;
    }

    public String getLastModifyUser() {
        return lastModifyUser;
    }

    public void setLastModifyUser(String lastModifyUser) {
        this.lastModifyUser = lastModifyUser;
    }

    public Long getLastModifyTime() {
        return lastModifyTime;
    }

    public void setLastModifyTime(Long lastModifyTime) {
        this.lastModifyTime = lastModifyTime;
    }


    public Builder bind() {
        return new Builder(this);
    }

    public static Builder builder() {
        return new Builder();
    }

        public static Builder builder(IDatabase dbOwner) {
            return new Builder(dbOwner);
        }

    public static class Builder {

        private final SecurityAdminLog targetEntity;

        public Builder() {
            targetEntity = new SecurityAdminLog();
        }

        public Builder(IDatabase dbOwner) {
            targetEntity = new SecurityAdminLog(dbOwner);
        }

        public Builder(SecurityAdminLog targetEntity) {
            this.targetEntity = targetEntity;
        }

        public SecurityAdminLog build() {
            return targetEntity;
        }

        public IDatabaseConnectionHolder connectionHolder() {
            return targetEntity.getConnectionHolder();
        }

        public Builder connectionHolder(IDatabaseConnectionHolder connectionHolder) {
            targetEntity.setConnectionHolder(connectionHolder);
            return this;
        }

        public IDatabase dbOwner() {
            return targetEntity.getDbOwner();
        }

        public Builder dbOwner(IDatabase dbOwner) {
            targetEntity.setDbOwner(dbOwner);
            return this;
        }

        public String dataSourceName() {
            return targetEntity.getDataSourceName();
        }

        public Builder dataSourceName(String dataSourceName) {
            targetEntity.setDataSourceName(dataSourceName);
            return this;
        }

        public IShardingable shardingable() {
            return targetEntity.getShardingable();
        }

        public Builder shardingable(IShardingable shardingable) {
            targetEntity.setShardingable(shardingable);
            return this;
        }


        public String id() {
            return targetEntity.getId();
        }

        public Builder id(String id) {
            targetEntity.setId(id);
            return this;
        }

        public String clientName() {
            return targetEntity.getClientName();
        }

        public Builder clientName(String clientName) {
            targetEntity.setClientName(clientName);
            return this;
        }

        public Integer type() {
            return targetEntity.getType();
        }

        public Builder type(Integer type) {
            targetEntity.setType(type);
            return this;
        }

        public String action() {
            return targetEntity.getAction();
        }

        public Builder action(String action) {
            targetEntity.setAction(action);
            return this;
        }

        public String adminId() {
            return targetEntity.getAdminId();
        }

        public Builder adminId(String adminId) {
            targetEntity.setAdminId(adminId);
            return this;
        }

        public String content() {
            return targetEntity.getContent();
        }

        public Builder content(String content) {
            targetEntity.setContent(content);
            return this;
        }

        public String createUser() {
            return targetEntity.getCreateUser();
        }

        public Builder createUser(String createUser) {
            targetEntity.setCreateUser(createUser);
            return this;
        }

        public Long createTime() {
            return targetEntity.getCreateTime();
        }

        public Builder createTime(Long createTime) {
            targetEntity.setCreateTime(createTime);
            return this;
        }

        public String lastModifyUser() {
            return targetEntity.getLastModifyUser();
        }

        public Builder lastModifyUser(String lastModifyUser) {
            targetEntity.setLastModifyUser(lastModifyUser);
            return this;
        }

        public Long lastModifyTime() {
            return targetEntity.getLastModifyTime();
        }

        public Builder lastModifyTime(Long lastModifyTime) {
            targetEntity.setLastModifyTime(lastModifyTime);
            return this;
        }
    }

    public interface FIELDS {
        String ID = "id";
        String CLIENT_NAME = "client_name";
        String TYPE = "type";
        String ACTION = "action";
        String ADMIN_ID = "admin_id";
        String CONTENT = "content";
        String CREATE_USER = "create_user";
        String CREATE_TIME = "create_time";
        String LAST_MODIFY_USER = "last_modify_user";
        String LAST_MODIFY_TIME = "last_modify_time";
    }

    public static final String TABLE_NAME = "security_admin_log";

    public static FieldConditionBuilder conditionBuilder() {
        return new FieldConditionBuilder();
    }

    public static FieldConditionBuilder conditionBuilder(String prefix) {
        return new FieldConditionBuilder(prefix);
    }

    public static FieldConditionBuilder conditionBuilder(Query<?> query) {
        return conditionBuilder(query, null);
    }

    public static FieldConditionBuilder conditionBuilder(Query<?> query, String prefix) {
        return new FieldConditionBuilder(query.owner(), query.dataSourceName(), prefix);
    }

    public static FieldConditionBuilder conditionBuilder(SecurityAdminLog entity) {
        return conditionBuilder(entity, null);
    }

    public static FieldConditionBuilder conditionBuilder(SecurityAdminLog entity, String prefix) {
        return new FieldConditionBuilder(entity.doGetSafeOwner(), entity.getDataSourceName(), prefix);
    }

    public static FieldConditionBuilder conditionBuilder(IDatabase owner, String prefix) {
        return new FieldConditionBuilder(owner, prefix);
    }

    public static FieldConditionBuilder conditionBuilder(IDatabase owner, String dataSourceName, String prefix) {
        return new FieldConditionBuilder(owner, dataSourceName, prefix);
    }

    public static class FieldConditionBuilder extends AbstractFieldConditionBuilder {

        public FieldConditionBuilder() {
            super(null, null, null);
        }

        public FieldConditionBuilder(String prefix) {
            super(null, null, prefix);
        }

        public FieldConditionBuilder(Query<?> query) {
            super(query.owner(), null, null);
        }

        public FieldConditionBuilder(Query<?> query, String prefix) {
            super(query.owner(), query.dataSourceName(), prefix);
        }

        public FieldConditionBuilder(IDatabase owner) {
            super(owner, null, null);
        }

        public FieldConditionBuilder(IDatabase owner, String prefix) {
            super(owner, null, prefix);
        }

        public FieldConditionBuilder(IDatabase owner, String dataSourceName, String prefix) {
            super(owner, dataSourceName, prefix);
        }

        public FieldCondition id() {
            return createFieldCondition(FIELDS.ID);
        }

        public FieldCondition clientName() {
            return createFieldCondition(FIELDS.CLIENT_NAME);
        }

        public FieldCondition type() {
            return createFieldCondition(FIELDS.TYPE);
        }

        public FieldCondition action() {
            return createFieldCondition(FIELDS.ACTION);
        }

        public FieldCondition adminId() {
            return createFieldCondition(FIELDS.ADMIN_ID);
        }

        public FieldCondition content() {
            return createFieldCondition(FIELDS.CONTENT);
        }

        public FieldCondition createUser() {
            return createFieldCondition(FIELDS.CREATE_USER);
        }

        public FieldCondition createTime() {
            return createFieldCondition(FIELDS.CREATE_TIME);
        }

        public FieldCondition lastModifyUser() {
            return createFieldCondition(FIELDS.LAST_MODIFY_USER);
        }

        public FieldCondition lastModifyTime() {
            return createFieldCondition(FIELDS.LAST_MODIFY_TIME);
        }
    }
}
