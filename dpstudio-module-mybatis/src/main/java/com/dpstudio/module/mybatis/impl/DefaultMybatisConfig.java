/*
 * Copyright 2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dpstudio.module.mybatis.impl;

import com.dpstudio.module.mybatis.IMybatis;
import com.dpstudio.module.mybatis.IMybatisConfig;
import com.dpstudio.module.mybatis.SqlSessionFactoryHelper;
import com.dpstudio.module.mybatis.annotation.MybatisConf;
import com.dpstudio.module.mybatis.nullBean.CacheNullBean;
import com.dpstudio.module.mybatis.nullBean.DatabaseIdProviderNullBean;
import com.dpstudio.module.mybatis.nullBean.ObjectFactoryNullBean;
import com.dpstudio.module.mybatis.nullBean.VFSNullBean;
import com.dpstudio.module.mybatis.transaction.YMPTransactionFactory;
import net.ymate.platform.commons.util.ClassUtils;
import net.ymate.platform.core.configuration.IConfigReader;
import net.ymate.platform.core.module.IModuleConfigurer;
import org.apache.commons.lang3.StringUtils;
import org.apache.ibatis.cache.Cache;
import org.apache.ibatis.io.VFS;
import org.apache.ibatis.mapping.DatabaseIdProvider;
import org.apache.ibatis.plugin.Interceptor;
import org.apache.ibatis.reflection.factory.ObjectFactory;
import org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory;
import org.apache.ibatis.transaction.TransactionFactory;
import org.apache.ibatis.type.TypeHandler;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * DefaultMybatisConfig generated By ModuleMojo on 2021/02/22 16:46
 *
 * @author YMP (https://www.ymate.net/)
 */
public final class DefaultMybatisConfig implements IMybatisConfig {

    private String configLocation;

    private String mapperLocations;

    private TransactionFactory transactionFactory;

    private String configurationProperties;

    private String environment;

    private List<Interceptor> plugins = new ArrayList<>();

    private List<TypeHandler> typeHandlers = new ArrayList<>();

    private List<String> typeHandlersPackage = new ArrayList<>();

    private List<Class<?>> typeAliases = new ArrayList<>();

    private List<String> typeAliasesPackage = new ArrayList<>();

    private Class<?> typeAliasesSuperType;

    private DatabaseIdProvider databaseIdProvider;

    private Class<? extends VFS> vfs;

    private Cache cache;

    private ObjectFactory objectFactory;

    private ObjectWrapperFactory objectWrapperFactory;

    private boolean initialized;

    public static DefaultMybatisConfig defaultConfig() {
        return builder().build();
    }

    public static DefaultMybatisConfig create(IModuleConfigurer moduleConfigurer) {
        try {
            return new DefaultMybatisConfig(null, moduleConfigurer);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static DefaultMybatisConfig create(Class<?> mainClass, IModuleConfigurer moduleConfigurer) {
        try {
            return new DefaultMybatisConfig(mainClass, moduleConfigurer);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static Builder builder() {
        return new Builder();
    }

    private DefaultMybatisConfig() {
    }

    private DefaultMybatisConfig(Class<?> mainClass, IModuleConfigurer moduleConfigurer) throws Exception {
        IConfigReader configReader = moduleConfigurer.getConfigReader();
        //
        MybatisConf confAnn = mainClass == null ? null : mainClass.getAnnotation(MybatisConf.class);
        //
        configLocation = configReader.getString(CONFIG_LOCATION, confAnn != null ? confAnn.configLocation() : "");
        mapperLocations = configReader.getString(MAPPER_LOCATIONS, confAnn != null ? confAnn.mapperLocations() : "${user.dir}/mapper/");
        transactionFactory = configReader.getClassImpl(TRANSACTION_FACTORY, confAnn != null ? confAnn.transactionFactory().getName() : YMPTransactionFactory.class.getName(), TransactionFactory.class);
        configurationProperties = configReader.getString(CONFIGURATION_PROPERTIES, confAnn != null ? confAnn.configurationProperties() : "");
        environment = configReader.getString(ENVIRONMENT, confAnn != null ? confAnn.environment() : SqlSessionFactoryHelper.class.getSimpleName());
        String[] pluginsKeys = configReader.getArray(PLUGINS);
        if (pluginsKeys != null && pluginsKeys.length > 0) {
            for (String pluginKey : pluginsKeys) {
                plugins.add(ClassUtils.impl(pluginKey, Interceptor.class, this.getClass()));
            }
        } else if (confAnn != null) {
            for (Class<? extends Interceptor> interceptor : confAnn.plugins()) {
                plugins.add(ClassUtils.impl(interceptor, Interceptor.class));
            }
        }

        String[] typeHandlersKeys = configReader.getArray(TYPE_HANDLERS);
        if (typeHandlersKeys != null && typeHandlersKeys.length > 0) {
            for (String typeHandlerKey : typeHandlersKeys) {
                typeHandlers.add(ClassUtils.impl(typeHandlerKey, TypeHandler.class, this.getClass()));
            }
        } else if (confAnn != null) {
            for (Class<? extends TypeHandler> typeHandler : confAnn.typeHandlers()) {
                typeHandlers.add(ClassUtils.impl(typeHandler, TypeHandler.class));
            }
        }
        if (configReader.getList(TYPE_HANDLERS_PACKAGE) != null && configReader.getList(TYPE_HANDLERS_PACKAGE).size() > 0) {
            typeHandlersPackage.addAll(configReader.getList(TYPE_HANDLERS_PACKAGE));
        } else if (confAnn != null && confAnn.typeHandlersPackage().length > 0) {
            typeHandlersPackage.addAll(Arrays.asList(confAnn.typeHandlersPackage()));
        }

        String[] typeAliasesKeys = configReader.getArray(TYPE_ALIASES);
        if (typeAliasesKeys != null && typeAliasesKeys.length > 0) {
            for (String typeAliasesKey : typeAliasesKeys) {
                typeAliases.add(Class.forName(typeAliasesKey));
            }
        } else if (confAnn != null && confAnn.typeAliases().length > 0) {
            typeAliases.addAll(Arrays.asList(confAnn.typeAliases()));
        }

        if (configReader.getList(TYPE_ALIASES_PACKAGE) != null && configReader.getList(TYPE_ALIASES_PACKAGE).size() > 0) {
            typeAliasesPackage.addAll(configReader.getList(TYPE_ALIASES_PACKAGE));
        } else if (confAnn != null && confAnn.typeAliasesPackage().length > 0) {
            typeAliasesPackage.addAll(Arrays.asList(confAnn.typeAliasesPackage()));
        }

        String typeAliasesSuperTypeKey = configReader.getString(TYPE_ALIASES_SUPERTYPE);
        if (StringUtils.isNotBlank(typeAliasesSuperTypeKey)) {
            typeAliasesSuperType = Class.forName(typeAliasesSuperTypeKey);
        } else if (confAnn != null) {
            typeAliasesSuperType = confAnn.typeAliasesSuperType();
        }
        String databaseIdProviderKey = configReader.getString(DATABASE_ID_PROVIDER);
        if (StringUtils.isNotBlank(databaseIdProviderKey)) {
            databaseIdProvider = ClassUtils.impl(databaseIdProviderKey, DatabaseIdProvider.class, this.getClass());
        } else if (confAnn != null && !DatabaseIdProviderNullBean.class.equals(confAnn.databaseIdProvider())) {
            databaseIdProvider = confAnn.databaseIdProvider().newInstance();
        }

        String vfsKey = configReader.getString(VFS_STR);
        if (StringUtils.isNotBlank(vfsKey)) {
            vfs = (Class<? extends VFS>) Class.forName(vfsKey, false, VFS.class.getClassLoader());
        } else if (confAnn != null && !VFSNullBean.class.equals(confAnn.vfs())) {
            vfs = confAnn.vfs();
        }

        String cacheKey = configReader.getString(CACHE);
        if (StringUtils.isNotBlank(cacheKey)) {
            cache = ClassUtils.impl(cacheKey, Cache.class, this.getClass());
        } else if (confAnn != null && !CacheNullBean.class.equals(confAnn.cache())) {
            cache = confAnn.cache().newInstance();
        }

        String objectFactoryKey = configReader.getString(OBJECT_FACTORY);
        if (StringUtils.isNotBlank(objectFactoryKey)) {
            objectFactory = ClassUtils.impl(objectFactoryKey, ObjectFactory.class, this.getClass());
        } else if (confAnn != null && !ObjectFactoryNullBean.class.equals(confAnn.objectFactory())) {
            objectFactory = confAnn.objectFactory().newInstance();
        }

        String objectWrapperFactoryKey = configReader.getString(OBJECT_WRAPPER_FACTORY);
        if (StringUtils.isNotBlank(objectWrapperFactoryKey)) {
            objectWrapperFactory = ClassUtils.impl(objectWrapperFactoryKey, ObjectWrapperFactory.class, this.getClass());
        } else if (confAnn != null && !ObjectFactoryNullBean.class.equals(confAnn.objectWrapperFactory())) {
            objectWrapperFactory = confAnn.objectWrapperFactory().newInstance();
        }

    }

    @Override
    public void initialize(IMybatis owner) throws Exception {
        if (!initialized) {
            // TODO What to do?
            initialized = true;
        }
    }

    @Override
    public boolean isInitialized() {
        return initialized;
    }

    @Override
    public String configLocation() {
        return configLocation;
    }

    @Override
    public String mapperLocations() {
        return mapperLocations;
    }

    @Override
    public TransactionFactory transactionFactory() {
        return transactionFactory;
    }

    @Override
    public String configurationProperties() {
        return configurationProperties;
    }

    @Override
    public String environment() {
        return environment;
    }

    @Override
    public List<Interceptor> plugins() {
        return plugins;
    }

    @Override
    public List<TypeHandler> typeHandlers() {
        return typeHandlers;
    }

    @Override
    public List<String> typeHandlersPackage() {
        return typeHandlersPackage;
    }

    @Override
    public List<Class<?>> typeAliases() {
        return typeAliases;
    }

    @Override
    public List<String> typeAliasesPackage() {
        return typeAliasesPackage;
    }

    @Override
    public Class<?> typeAliasesSuperType() {
        return typeAliasesSuperType;
    }

    @Override
    public DatabaseIdProvider databaseIdProvider() {
        return databaseIdProvider;
    }

    @Override
    public Class<? extends VFS> vfs() {
        return vfs;
    }

    @Override
    public Cache cache() {
        return cache;
    }

    @Override
    public ObjectFactory objectFactory() {
        return objectFactory;
    }

    @Override
    public ObjectWrapperFactory objectWrapperFactory() {
        return objectWrapperFactory;
    }

    public void setConfigLocation(String configLocation) {
        this.configLocation = configLocation;
    }

    public void setMapperLocations(String mapperLocations) {
        this.mapperLocations = mapperLocations;
    }

    public void setTransactionFactory(TransactionFactory transactionFactory) {
        this.transactionFactory = transactionFactory;
    }

    public void setConfigurationProperties(String configurationProperties) {
        this.configurationProperties = configurationProperties;
    }

    public void setEnvironment(String environment) {
        this.environment = environment;
    }

    public void setPlugins(List<Interceptor> plugins) {
        this.plugins = plugins;
    }

    public void setTypeHandlers(List<TypeHandler> typeHandlers) {
        this.typeHandlers = typeHandlers;
    }

    public void setTypeHandlersPackage(List<String> typeHandlersPackage) {
        this.typeHandlersPackage = typeHandlersPackage;
    }

    public void setTypeAliases(List<Class<?>> typeAliases) {
        this.typeAliases = typeAliases;
    }

    public void setTypeAliasesPackage(List<String> typeAliasesPackage) {
        this.typeAliasesPackage = typeAliasesPackage;
    }

    public void setTypeAliasesSuperType(Class<?> typeAliasesSuperType) {
        this.typeAliasesSuperType = typeAliasesSuperType;
    }

    public void setDatabaseIdProvider(DatabaseIdProvider databaseIdProvider) {
        this.databaseIdProvider = databaseIdProvider;
    }

    public void setVfs(Class<? extends VFS> vfs) {
        this.vfs = vfs;
    }

    public void setCache(Cache cache) {
        this.cache = cache;
    }

    public void setObjectFactory(ObjectFactory objectFactory) {
        this.objectFactory = objectFactory;
    }

    public void setObjectWrapperFactory(ObjectWrapperFactory objectWrapperFactory) {
        this.objectWrapperFactory = objectWrapperFactory;
    }

    public static final class Builder {

        private final DefaultMybatisConfig config = new DefaultMybatisConfig();

        private Builder() {
        }

        public Builder configLocation(String configLocation) {
            config.setConfigLocation(configLocation);
            return this;
        }

        public Builder mapperLocations(String mapperLocations) {
            config.setMapperLocations(mapperLocations);
            return this;
        }

        public Builder transactionFactory(TransactionFactory transactionFactory) {
            config.setTransactionFactory(transactionFactory);
            return this;
        }

        public Builder configurationProperties(String configurationProperties) {
            config.setConfigurationProperties(configurationProperties);
            return this;
        }

        public Builder environment(String environment) {
            config.setEnvironment(environment);
            return this;
        }

        public Builder plugins(List<Interceptor> plugins) {
            config.setPlugins(plugins);
            return this;
        }

        public Builder typeHandlers(List<TypeHandler> typeHandlers) {
            config.setTypeHandlers(typeHandlers);
            return this;
        }

        public Builder typeHandlersPackage(List<String> typeHandlersPackage) {
            config.setTypeHandlersPackage(typeHandlersPackage);
            return this;
        }

        public Builder typeAliasesSuperType(Class<?> typeAliasesSuperType) {
            config.setTypeAliasesSuperType(typeAliasesSuperType);
            return this;
        }

        public Builder databaseIdProvider(DatabaseIdProvider databaseIdProvider) {
            config.setDatabaseIdProvider(databaseIdProvider);
            return this;
        }

        public Builder vfs(Class<? extends VFS> vfs) {
            config.setVfs(vfs);
            return this;
        }

        public Builder cache(Cache cache) {
            config.setCache(cache);
            return this;
        }

        public Builder objectFactory(ObjectFactory objectFactory) {
            config.setObjectFactory(objectFactory);
            return this;
        }

        public Builder objectWrapperFactory(ObjectWrapperFactory objectWrapperFactory) {
            config.setObjectWrapperFactory(objectWrapperFactory);
            return this;
        }

        public DefaultMybatisConfig build() {
            return config;
        }
    }
}