/*
 * Copyright 2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.mx.dev.security;

import com.mx.dev.security.bean.GroupBean;
import com.mx.dev.security.bean.MenuBean;
import com.mx.dev.security.bean.PermissionBean;
import com.mx.dev.security.impl.DefaultSecurityConfig;
import com.mx.dev.security.init.MenuMeta;
import com.mx.dev.security.init.PermissionMeta;
import com.mx.dev.security.utils.Objects;
import com.mx.dev.security.utils.UnpackUtils;
import com.mx.dev.utils.ListUtils;
import net.ymate.platform.configuration.impl.XMLConfigFileParser;
import net.ymate.platform.core.*;
import net.ymate.platform.core.configuration.IConfigFileParser;
import net.ymate.platform.core.event.IEventListener;
import net.ymate.platform.core.module.IModule;
import net.ymate.platform.core.module.IModuleConfigurer;
import net.ymate.platform.core.module.impl.DefaultModuleConfigurer;
import org.apache.commons.lang.NullArgumentException;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.StringUtils;

import java.io.File;
import java.util.*;

/**
 * Security generated By ModuleMojo on 2020/06/30 17:49
 *
 * @author YMP (https://www.ymate.net/)
 */
public final class Security implements IModule, ISecurity {


    private static volatile ISecurity instance;

    private IApplication owner;

    private ISecurityConfig config;

    private boolean initialized;

    public static ISecurity get() {
        ISecurity inst = instance;
        if (inst == null) {
            synchronized (Security.class) {
                inst = instance;
                if (inst == null) {
                    instance = inst = YMP.get().getModuleManager().getModule(Security.class);
                }
            }
        }
        return inst;
    }

    public Security() {
    }

    public Security(ISecurityConfig config) {
        this.config = config;
    }

    @Override
    public String getName() {
        return MODULE_NAME;
    }

    @Override
    public void initialize(IApplication owner) throws Exception {
        if (!initialized) {
            //
            YMP.showVersion("Initializing mx-dev-security-security-${version}", new Version(1, 0, 0, Security.class, Version.VersionType.Alpha));
            //
            this.owner = owner;
            if (config == null) {
                IApplicationConfigureFactory configureFactory = owner.getConfigureFactory();
                if (configureFactory != null) {
                    IApplicationConfigurer configurer = configureFactory.getConfigurer();
                    IModuleConfigurer moduleConfigurer = configurer == null ? null : configurer.getModuleConfigurer(MODULE_NAME);
                    if (moduleConfigurer != null) {
                        config = DefaultSecurityConfig.create(configureFactory.getMainClass(), moduleConfigurer);
                    } else {
                        config = DefaultSecurityConfig.create(configureFactory.getMainClass(), DefaultModuleConfigurer.createEmpty(MODULE_NAME));
                    }
                }
                if (config == null) {
                    config = DefaultSecurityConfig.defaultConfig();
                }
            }
            if (!config.isInitialized()) {
                config.initialize(this);
            }
            if (config.isEnabled()) {
                PermissionMeta.init(config);
                MenuMeta.init(config);
                owner.getEvents().registerListener(ApplicationEvent.class, (IEventListener<ApplicationEvent>) context -> {
                    if (ApplicationEvent.EVENT.APPLICATION_INITIALIZED.equals(context.getEventName())) {
                        try {
                            UnpackUtils.unpackFile(config);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                        UnpackUtils.unpackErrorFile(config);
                        UnpackUtils.initDatabase(config);
                    }
                    return false;
                });
            }
            initialized = true;
        }
    }


    @Override
    public boolean isInitialized() {
        return initialized;
    }

    @Override
    public void close() throws Exception {
        if (initialized) {
            initialized = false;
            if (config.isEnabled()) {
                PermissionMeta.destroy();
            }
            config = null;
            owner = null;
        }
    }

    @Override
    public IApplication getOwner() {
        return owner;
    }

    @Override
    public ISecurityConfig getConfig() {
        return config;
    }

    @Override
    public List<GroupBean> groupList() {
        return PermissionMeta.getGroups("defaultClientName");
    }

    @Override
    public List<GroupBean> groupList(String clientName) {
        return PermissionMeta.getGroups(clientName);
    }

    @Override
    public List<PermissionBean> permissionList(String groupId,String clientName) {
        return PermissionMeta.getPermissions(groupId,clientName);
    }

    @Override
    public List<PermissionBean> permissionList() {
        return permissionList(null,"defaultClientName");
    }

    @Override
    public PermissionBean findByCode(List<PermissionBean> permissionBeans, String code,String clientName) {
        return PermissionMeta.findByCode(permissionBeans, clientName,code);
    }

    @Override
    public List<MenuBean> menuListByFile(String filePath) {
        List<MenuBean> menuList = new ArrayList<>();
        File file = new File(filePath);
        if (!file.exists()) {
            return menuList;
        }

        try {
            IConfigFileParser handler = new XMLConfigFileParser(file).load(true);
            Map<String, IConfigFileParser.Category> categoryMap = handler.getCategories();
            categoryMap.forEach((k, v) -> {
                Map<String, IConfigFileParser.Property> propertyMap = handler.getCategory(v.getName()).getProperties();
                propertyMap.forEach((k1, v1) -> {
                    MenuBean menuBean = MenuBean.builder()
                            .id(Objects.get(v1.getAttribute("id"), ""))
                            .name(StringUtils.defaultIfBlank(v1.getName(), ""))
                            .value(StringUtils.defaultIfBlank(v1.getContent(), ""))
                            .icon(Objects.get(v1.getAttribute("icon"), ""))
                            .url(Objects.get(v1.getAttribute("url"), ""))
                            .pid(Objects.get(v1.getAttribute("pid"), ""))
                            .permissions(Objects.get(v1.getAttribute("permissions"), ""))
                            .path(Objects.get(v1.getAttribute("path"), ""));
                    menuList.add(menuBean);
                });
            });
        } catch (Exception e) {
            e.printStackTrace();
        }

        return menuList;
    }

    @Override
    public List<MenuBean> menuList(String clientName) {
        //热加载
        if (config.isHotLoading()) {
            try {
                return MenuMeta.menuListByClientName(config, clientName);
            } catch (Exception e) {
                e.printStackTrace();
                return new ArrayList<>();
            }
        }
        return MenuMeta.Store.get(clientName);
    }


    @Override
    public List<MenuBean> permissionMenu(String token,String clientName) {
        List<MenuBean> menuBeanList = menuList(clientName);
        List<String> userPermissions = new ArrayList<>();
        boolean isFounder = false;
        IAuthenticator iAuthenticator = config.authenticatorClass();
        if (iAuthenticator == null) {
            throw new NullArgumentException("authenticator_class");
        }
        try {
            userPermissions = iAuthenticator.userPermissions(token);
            isFounder = iAuthenticator.isFounder(token);
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (isFounder) {
            return menuBeanList;
        }
        if (ObjectUtils.isEmpty(menuBeanList)) {
            return menuBeanList;
        }
        List<MenuBean> newMenuList = new ArrayList<>();
        for (MenuBean menuBean : menuBeanList) {
            if (StringUtils.isBlank(menuBean.permissions())) {
                newMenuList.add(menuBean);
                continue;
            }
            List<String> permissons = Arrays.asList(menuBean.getPermissions().split(","));
            if (ObjectUtils.isEmpty(permissons)) {
                newMenuList.add(menuBean);
                continue;
            }
            if (ObjectUtils.isEmpty(userPermissions)) {
                continue;
            }
            if (ListUtils.checkSame(userPermissions, permissons)) {
                newMenuList.add(menuBean);
            }
        }
        return newMenuList;
    }

    @Override
    public List<MenuBean> permissionMenu(String clientName, boolean isFounder, List<String> userPermissions) {
        List<MenuBean> menuBeanList = menuList(clientName);
        if (isFounder) {
            return menuBeanList;
        }
        if (ObjectUtils.isEmpty(menuBeanList)) {
            return menuBeanList;
        }
        List<MenuBean> newMenuList = new ArrayList<>();
        for (MenuBean menuBean : menuBeanList) {
            if (StringUtils.isBlank(menuBean.permissions())) {
                newMenuList.add(menuBean);
                continue;
            }
            List<String> permissons = Arrays.asList(menuBean.getPermissions().split(","));
            if (ObjectUtils.isEmpty(permissons)) {
                newMenuList.add(menuBean);
                continue;
            }
            if (ObjectUtils.isEmpty(userPermissions)) {
                continue;
            }
            if (ListUtils.checkSame(userPermissions, permissons)) {
                newMenuList.add(menuBean);
            }
        }
        return newMenuList;
    }
}
