/*
 * Copyright 2021 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.mx.module.mybatis.impl;

import com.mx.module.mybatis.IMybatis;
import com.mx.module.mybatis.IMybatisConfig;
import net.ymate.platform.core.module.IModuleConfigurer;
import net.ymate.platform.core.module.impl.DefaultModuleConfigurable;

/**
 * DefaultMybatisConfig generated By ModuleMojo on 2021/02/22 16:46
 *
 * @author YMP (https://www.ymate.net/)
 */
public final class DefaultMybatisConfigurable extends DefaultModuleConfigurable {

    public static Builder builder() {
        return new Builder();
    }

    private DefaultMybatisConfigurable() {
        super(IMybatis.MODULE_NAME);
    }

    public static final class Builder {

        private final DefaultMybatisConfigurable configurable = new DefaultMybatisConfigurable();

        private Builder() {
        }

        public Builder configLocation(String configLocation) {
            configurable.addConfig(IMybatisConfig.CONFIG_LOCATION, configLocation);
            return this;
        }
        public Builder mapperLocations(String mapperLocations) {
            configurable.addConfig(IMybatisConfig.MAPPER_LOCATIONS, mapperLocations);
            return this;
        }
        public Builder transactionFactory(String transactionFactory) {
            configurable.addConfig(IMybatisConfig.TRANSACTION_FACTORY, transactionFactory);
            return this;
        }
        public Builder configurationProperties(String configurationProperties) {
            configurable.addConfig(IMybatisConfig.CONFIGURATION_PROPERTIES, configurationProperties);
            return this;
        }
        public Builder environment(String environment) {
            configurable.addConfig(IMybatisConfig.ENVIRONMENT, environment);
            return this;
        }
        public Builder plugins(String plugins) {
            configurable.addConfig(IMybatisConfig.PLUGINS, plugins);
            return this;
        }
        public Builder typeHandlers(String typeHandlers) {
            configurable.addConfig(IMybatisConfig.TYPE_HANDLERS, typeHandlers);
            return this;
        }
        public Builder typeHandlersPackage(String typeHandlersPackage) {
            configurable.addConfig(IMybatisConfig.TYPE_HANDLERS_PACKAGE, typeHandlersPackage);
            return this;
        }
        public Builder typeAliases(String typeAliases) {
            configurable.addConfig(IMybatisConfig.TYPE_ALIASES, typeAliases);
            return this;
        }
        public Builder typeAliasesPackage(String typeAliasesPackage) {
            configurable.addConfig(IMybatisConfig.TYPE_ALIASES_PACKAGE, typeAliasesPackage);
            return this;
        }
        public Builder typeAliasesSuperType(String typeAliasesSuperType) {
            configurable.addConfig(IMybatisConfig.TYPE_ALIASES_SUPERTYPE, typeAliasesSuperType);
            return this;
        }
        public Builder databaseIdProvider(String databaseIdProvider) {
            configurable.addConfig(IMybatisConfig.DATABASE_ID_PROVIDER, databaseIdProvider);
            return this;
        }
        public Builder vfs(String vfs) {
            configurable.addConfig(IMybatisConfig.VFS_STR, vfs);
            return this;
        }
        public Builder cache(String cache) {
            configurable.addConfig(IMybatisConfig.CACHE, cache);
            return this;
        }
        public Builder objectFactory(String objectFactory) {
            configurable.addConfig(IMybatisConfig.OBJECT_FACTORY, objectFactory);
            return this;
        }
        public Builder objectWrapperFactory(String objectWrapperFactory) {
            configurable.addConfig(IMybatisConfig.OBJECT_WRAPPER_FACTORY, objectWrapperFactory);
            return this;
        }

        public IModuleConfigurer build() {
            return configurable.toModuleConfigurer();
        }
    }
}